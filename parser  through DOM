//通过java中提供的DOM方法来解析xml文件；

package com.imooc.dmtest.test;
import java.io.IOException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;
public class DOMTest {

	public static void main(String[] args) {
		// 先创建一个DocumentBuilderFactory对象；
		DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
		// 创建一个DocumentBuilder对象；
		try {
			DocumentBuilder db = dbf.newDocumentBuilder();
			// 通过java中的parse方法就可以解析xml文件；
			Document document = db.parse("books.xml");
			// 获取所有book节点的集合；
			NodeList bookList = document.getElementsByTagName("book");
			// 遍历每一个book节点；
			System.out.println("一共有" + bookList.getLength() + "本书");
			for (int i = 0; i < bookList.getLength(); i++) {
				System.out.println("==========下面开始遍历第" + (i + 1) + "本书的内容=========");

				// * ****这个方法是在我们不知道节点的属性的·情况的条件下，比较麻烦，知道了以后可以简化的；
				// 通过item方法获取每一本书；
				Node book = bookList.item(i);
				// 获取book的所有属性；
				NamedNodeMap attrs = book.getAttributes();
				System.out.println("第" + (i + 1) + "本书共有" + attrs.getLength() + "个属性");
				// 遍历book的属性；
				for (int j = 0; j < attrs.getLength(); j++) {
					// 获取到某一个属性；
					Node attr = attrs.item(j);
					System.out.print("属性名是：" + attr.getNodeName());
					System.out.println("----属性值是：" + attr.getNodeValue());

				}

				/* 简化后的操作； */
				// Element book=(Element)bookList.item(i);
				// String attrValue=book.getAttribute("id");
				// System.out.println("id属性的属性值是"+attrValue);

				// 解析book的子节点；
				NodeList childNodes = book.getChildNodes();
				// 遍历childNodes，获取每一个节点名和节点值；
				System.out.println("第" + (i + 1) + "本书共有" + childNodes.getLength() + "个子节点");
				for (int k = 0; k < childNodes.getLength(); k++) {
					if (childNodes.item(k).getNodeType() == Node.ELEMENT_NODE) {
						System.out.print(childNodes.item(k).getNodeName());
						System.out.println("------" + childNodes.item(k).getFirstChild().getNodeValue());
					}
				}
				System.out.println("==========结束遍历第" + (i + 1) + "本书的内容=========");

			}
		} catch (ParserConfigurationException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (SAXException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

}
